-- Lerntexte LF5
PRAGMA foreign_keys=ON;
BEGIN TRANSACTION;
-- 5801
UPDATE units SET content_html = '<h2>T1 – Umfeld der Softwareentwicklung analysieren</h2><p>Softwareentwicklung ist ein Kernbereich der Digitalisierung. Ohne Software können weder Unternehmen noch private Anwender moderne IT nutzen. Entwickelnde arbeiten in unterschiedlichen Rollen:</p><ul><li><strong>Frontend</strong>: Gestaltung der Benutzeroberflächen.</li><li><strong>Backend</strong>: Serverlogik &amp; Datenbanken.</li><li><strong>Full-Stack</strong>: Kombination aus Frontend &amp; Backend.</li><li><strong>Mobile</strong>: Apps für Smartphones &amp; Tablets.</li><li><strong>DevOps</strong>: Verbindung von Entwicklung &amp; Betrieb (Deployment, CI/CD).</li><li><strong>Embedded</strong>: Programmierung von Mikrocontrollern / Geräten.</li><li><strong>Datenbankentwicklung</strong>: Modellierung &amp; Abfragen.</li></ul><p>Wichtige Kompetenzen: fachlich (Sprachen, Algorithmen, Datenbanken) <em>und</em> sozial (Teamarbeit, Kommunikation, Projektmanagement).</p><h3>Lebenszyklus</h3><p>Planung → Analyse → Design → Implementierung → Test → Betrieb → Wartung.</p><h3>Softwarearten</h3><ul><li><strong>Systemsoftware</strong> (Betriebssysteme, Treiber)</li><li><strong>Anwendungssoftware</strong> (Office, ERP, Fachanwendungen)</li><li><strong>Unterstützungssoftware</strong> (IDEs, Frameworks, Tools)</li></ul><p>Beschaffung &amp; Anpassung: Standardsoftware vs. Individualsoftware; Anpassung durch Customizing oder Erweiterungsprogrammierung.</p><h3>Wichtig!</h3><ul><li>Rollen: Frontend, Backend, Full-Stack, Mobile, DevOps, Embedded, DB</li><li>Kompetenzen: fachlich + sozial</li><li>Arten: System / Anwendung / Unterstützung</li><li>Standard vs. Individualsoftware</li><li>Lebenszyklus: Analyse → Wartung</li></ul>' WHERE id=5801;
-- 5802
UPDATE units SET content_html = '<h2>T2 – Grundlagen zur Verwaltung von Daten in IT-Systemen</h2><p><strong>Daten</strong> sind Rohwerte (z. B. "23, 45, 67"), <strong>Informationen</strong> entstehen erst durch Kontext (z. B. "23 °C Raumtemperatur"). Grundlage: EVA-Prinzip (Eingabe → Verarbeitung → Ausgabe).</p><h3>Zahlensysteme</h3><ul><li><strong>Dezimal</strong> (Basis 10: 0–9)</li><li><strong>Dual/Binär</strong> (Basis 2: 0,1 – direkt für Hardware)</li><li><strong>Hexadezimal</strong> (Basis 16: 0–9, A–F – kompakt für Adressen)</li></ul><h3>Darstellungsformen</h3><ul><li>Zahlen: ganzzahlig (Integer), Fließkomma (Float / IEEE 754)</li><li>Texte: ASCII, ISO 8859, Unicode (UTF‑8)</li><li>Grafik: Raster (Pixel) vs. Vektor (mathematische Formen)</li></ul><h3>Schutzaspekte</h3><p><strong>Datenschutz</strong>: Schutz personenbezogener Daten. <strong>Datensicherheit</strong>: Vertraulichkeit, Integrität, Verfügbarkeit (Schutzziele) + Backups und Zugriffsbeschränkungen.</p><h3>Wichtig!</h3><ul><li>Daten ≠ Informationen (Kontext)</li><li>EVA: Eingabe – Verarbeitung – Ausgabe</li><li>Zahlensysteme: Dezimal / Binär / Hex</li><li>Darstellungen: Zahl, Text, Grafik</li><li>Datenschutz &amp; -sicherheit Pflicht</li></ul>' WHERE id=5802;
-- 5803
UPDATE units SET content_html = '<h2>T3 – Grundlagen der Softwareentwicklung</h2><p>Vorgehensmodelle geben Struktur:</p><ul><li><strong>Wasserfall</strong>: lineare Phasen (Analyse → Design → Implementierung → Test)</li><li><strong>V-Modell</strong>: wie Wasserfall, aber testorientierte Gegenüberstellung (Verifikation/Validierung)</li><li><strong>Agil (Scrum, Kanban)</strong>: iterativ, kurze Feedback-Zyklen</li></ul><h3>Programmierparadigmen</h3><ul><li>Imperativ: Schritt-für-Schritt (z. B. C)</li><li>Objektorientiert: Klassen &amp; Objekte (z. B. Java, C#)</li><li>Funktional: Funktionen ohne Seiteneffekte (z. B. Haskell, funktionale Features in Python/JS)</li></ul><h3>Sprachen &amp; Auswahl</h3><p>C, C++, Java, C#, Python, JavaScript, SQL usw. Auswahl nach Domäne, Community, Performance, Wartbarkeit.</p><h3>Werkzeuge &amp; Praktiken</h3><ul><li>Compiler vs. Interpreter</li><li>Debugging &amp; Logging</li><li>Build &amp; Dependency-Management</li><li>Testing &amp; CI/CD</li><li>Dokumentation (Code-Kommentare, UML, Projektdoku)</li></ul><h3>Wichtig!</h3><ul><li>Modelle: Wasserfall, V, Scrum, Kanban</li><li>Paradigmen: imperativ, OO, funktional</li><li>Compiler ≠ Interpreter</li><li>Debugging &amp; Tests unverzichtbar</li><li>Doku begleitet den Prozess</li></ul>' WHERE id=5803;
-- 5804
UPDATE units SET content_html = '<h2>T4 – Einfache Anwendungen zur Datenverarbeitung programmieren</h2><p>Programmierung = Algorithmen in Code abbilden.</p><h3>Grundelemente</h3><ul><li>Variablen &amp; Datentypen (Integer, Float, String, Bool)</li><li>Operatoren (arithmetisch, Vergleich, logisch)</li><li>Kontrollstrukturen (if/else, switch, for/while)</li><li>Eingabe/Ausgabe (Konsole, GUI, Datei)</li><li>Funktionen/Methoden (Modularisierung, Wiederverwendung)</li><li>Fehlerbehandlung (try/catch, Validierung)</li></ul><p>Kleine Programme: Daten erfassen → verarbeiten → Ergebnis ausgeben.</p><h3>Wichtig!</h3><ul><li>Algorithmen: Schritt-für-Schritt Anleitungen</li><li>Variablen speichern Zustand</li><li>Kontrollstrukturen steuern Ablauf</li><li>Modularisierung schafft Übersicht</li><li>Fehlerbehandlung erhöht Stabilität</li></ul>' WHERE id=5804;
-- 5805
UPDATE units SET content_html = '<h2>T5 – Anwendungen zur Verwaltung von Daten in Dateien entwickeln</h2><p>Dateien ergänzen oder ersetzen in kleinen Szenarien Datenbanken.</p><h3>Typische Formate</h3><ul><li><strong>TXT</strong>: frei, unstrukturiert</li><li><strong>CSV</strong>: tabellarisch, Trennzeichen-basiert</li><li><strong>XML</strong>: hierarchisch, selbstbeschreibend, verbose</li><li><strong>JSON</strong>: leichtgewichtig, Web-Standard</li></ul><h3>Operationen</h3><ul><li>Einlesen (Zeile für Zeile / Stream)</li><li>Parsen &amp; Validieren</li><li>Schreiben / Anhängen</li><li>Bearbeiten (Suchen/Ersetzen)</li></ul><h3>Vor- / Nachteile (Kurz)</h3><ul><li>TXT: simpel / keine Struktur</li><li>CSV: einfach / keine Hierarchie</li><li>XML: flexibel / Overhead</li><li>JSON: kompakt / begrenzt für sehr komplexe Schemata</li></ul><h3>Wichtig!</h3><ul><li>Formate: TXT, CSV, XML, JSON</li><li>Grundoperationen: Lesen, Schreiben, Bearbeiten</li><li>JSON für Web, XML für komplexe Strukturen</li><li>CSV ideal für Tabellen</li></ul>' WHERE id=5805;
-- 5806
UPDATE units SET content_html = '<h2>T6 – Anwendungen zur Verwaltung von Daten in Datenbanken</h2><p>Datenbanken sind leistungsfähiger als reine Dateien: strukturierter Zugriff, Abfragen, Mehrbenutzerfähigkeit.</p><h3>Relationale Grundlagen</h3><p>Tabellen (Relationen), Zeilen (Tupel), Spalten (Attribute), Schlüssel (Primary &amp; Foreign Keys).</p><h3>Normalisierung (Ziel: Redundanz ↓ / Konsistenz ↑)</h3><ul><li>1NF: atomare Attribute</li><li>2NF: volle funktionale Abhängigkeit vom Primärschlüssel</li><li>3NF: keine transitiven Abhängigkeiten</li></ul><h3>SQL-Kategorien</h3><ul><li><strong>DDL</strong>: CREATE, ALTER, DROP</li><li><strong>DML</strong>: INSERT, UPDATE, DELETE</li><li><strong>DQL</strong>: SELECT (WHERE, JOIN)</li></ul><h3>CRUD</h3><ul><li>Create – Einfügen</li><li>Read – Abfragen</li><li>Update – Ändern</li><li>Delete – Löschen</li></ul><p>Beispiel: Kundendatenbank – Abfrage: „Welche Kunden haben offene Rechnungen?“</p><h3>Wichtig!</h3><ul><li>DB stärker als Datei</li><li>Relationen &amp; Schlüssel</li><li>Normalisierung gegen Redundanz</li><li>SQL: DDL, DML, DQL</li><li>CRUD-Grundoperationen</li></ul>' WHERE id=5806;
-- 5807
UPDATE units SET content_html = '<h2>T7 – Software testen und dokumentieren</h2><p>Tests sichern Qualität und reduzieren Fehlerrisiken vor Auslieferung.</p><h3>Testarten</h3><ul><li><strong>Unit</strong>: einzelne Funktionen/Methoden</li><li><strong>Integration</strong>: Zusammenspiel mehrerer Komponenten</li><li><strong>System</strong>: Gesamtes System</li><li><strong>Akzeptanz</strong>: Abnahme durch Anwender/Kunde</li></ul><h3>Strategien</h3><ul><li>Blackbox: Fokus auf Ein-/Ausgabe</li><li>Whitebox: interne Logik/Struktur</li></ul><h3>Werkzeuge</h3><p>Test-Frameworks (z. B. JUnit, pytest), Coverage, Mocking, CI-Pipelines.</p><h3>Dokumentation</h3><ul><li>Entwickler: Code-Kommentare, UML, API-Doku</li><li>Anwender: Handbuch, Online-Hilfe, Tutorials</li></ul><h3>Wichtig!</h3><ul><li>Testarten: Unit, Integration, System, Akzeptanz</li><li>Strategien: Blackbox / Whitebox</li><li>Testen findet Fehler früh</li><li>Doku für Entwickler &amp; Anwender</li></ul>' WHERE id=5807;
COMMIT;
